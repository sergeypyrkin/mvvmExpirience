1 СПОСОБ ПРИВЯЗКИ:
View.xaml
    <Window.DataContext>
        <vm:ViewModel></vm:ViewModel>
    </Window.DataContext>

    <TextBox Text="{Binding Input}" Width="200" Margin="10" Background="PapayaWhip" Grid.Row="0"></TextBox>
    <TextBox Text="{Binding Output}" Width="200" Margin="10" Background="PapayaWhip" Grid.Row="1"></TextBox>
    <Button Command="{Binding ChangeText}" Margin="10" Width="200">Change Text</Button>

ViewModel.cs: 
        private string input;
        public string Input
        {
            get { return this.input; }
            set
            {
                this.input = value;
                RaisePropertyChanged();
            }
        }

        private string output;
        public string Output
        {
            get { return this.output; }
            set
            {
                this.output = value;
                RaisePropertyChanged();
            }
        }


        public ICommand ChangeText { get; set; }
        public ICommand OpenWin1 { get; set; }


        public ViewModel()
        {
            Number = "5";
            ChangeText = new RelayCommand(e => 
            { this.Output = this.Input; },
                o =>
                {
                    return true;
                });

            OpenWin1 = new RelayCommand(e =>
                {
                    var gv = new GridView(Number);
                    gv.ShowDialog();
                },
                o =>
                {
                    return true;
                });
        }

ПРИ ЭТОМ RelayCommand МОЖНО ОПРЕДЕЛИТЬ САМОМУ


        class RelayCommand : ICommand
        {
            private Action<object> execute;
            private Func<object, bool> canExecute;

            public event EventHandler CanExecuteChanged
            {
                add { CommandManager.RequerySuggested += value; }
                remove { CommandManager.RequerySuggested -= value; }
            }

            public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
            {
                this.execute = execute;
                this.canExecute = canExecute;
            }

            public bool CanExecute(object parameter)
            {
                return this.canExecute == null || this.canExecute(parameter);
            }

            public void Execute(object parameter)
            {
                this.execute(parameter);
            }

КАК И RaisePropertyChanged ПРОСТО РЕАЛИЗОВАВ ИНТЕРФЕЙС У viewmodel

    class ViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {

            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        }